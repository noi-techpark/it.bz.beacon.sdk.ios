// SPDX-FileCopyrightText: NOI Techpark <digital@noi.bz.it>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

//
// URI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class URI: Codable {

    public var absolute: Bool?
    public var authority: String?
    public var fragment: String?
    public var host: String?
    public var opaque: Bool?
    public var path: String?
    public var port: Int?
    public var query: String?
    public var rawAuthority: String?
    public var rawFragment: String?
    public var rawPath: String?
    public var rawQuery: String?
    public var rawSchemeSpecificPart: String?
    public var rawUserInfo: String?
    public var scheme: String?
    public var schemeSpecificPart: String?
    public var userInfo: String?


    
    public init(absolute: Bool?, authority: String?, fragment: String?, host: String?, opaque: Bool?, path: String?, port: Int?, query: String?, rawAuthority: String?, rawFragment: String?, rawPath: String?, rawQuery: String?, rawSchemeSpecificPart: String?, rawUserInfo: String?, scheme: String?, schemeSpecificPart: String?, userInfo: String?) {
        self.absolute = absolute
        self.authority = authority
        self.fragment = fragment
        self.host = host
        self.opaque = opaque
        self.path = path
        self.port = port
        self.query = query
        self.rawAuthority = rawAuthority
        self.rawFragment = rawFragment
        self.rawPath = rawPath
        self.rawQuery = rawQuery
        self.rawSchemeSpecificPart = rawSchemeSpecificPart
        self.rawUserInfo = rawUserInfo
        self.scheme = scheme
        self.schemeSpecificPart = schemeSpecificPart
        self.userInfo = userInfo
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(absolute, forKey: "absolute")
        try container.encodeIfPresent(authority, forKey: "authority")
        try container.encodeIfPresent(fragment, forKey: "fragment")
        try container.encodeIfPresent(host, forKey: "host")
        try container.encodeIfPresent(opaque, forKey: "opaque")
        try container.encodeIfPresent(path, forKey: "path")
        try container.encodeIfPresent(port, forKey: "port")
        try container.encodeIfPresent(query, forKey: "query")
        try container.encodeIfPresent(rawAuthority, forKey: "rawAuthority")
        try container.encodeIfPresent(rawFragment, forKey: "rawFragment")
        try container.encodeIfPresent(rawPath, forKey: "rawPath")
        try container.encodeIfPresent(rawQuery, forKey: "rawQuery")
        try container.encodeIfPresent(rawSchemeSpecificPart, forKey: "rawSchemeSpecificPart")
        try container.encodeIfPresent(rawUserInfo, forKey: "rawUserInfo")
        try container.encodeIfPresent(scheme, forKey: "scheme")
        try container.encodeIfPresent(schemeSpecificPart, forKey: "schemeSpecificPart")
        try container.encodeIfPresent(userInfo, forKey: "userInfo")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        absolute = try container.decodeIfPresent(Bool.self, forKey: "absolute")
        authority = try container.decodeIfPresent(String.self, forKey: "authority")
        fragment = try container.decodeIfPresent(String.self, forKey: "fragment")
        host = try container.decodeIfPresent(String.self, forKey: "host")
        opaque = try container.decodeIfPresent(Bool.self, forKey: "opaque")
        path = try container.decodeIfPresent(String.self, forKey: "path")
        port = try container.decodeIfPresent(Int.self, forKey: "port")
        query = try container.decodeIfPresent(String.self, forKey: "query")
        rawAuthority = try container.decodeIfPresent(String.self, forKey: "rawAuthority")
        rawFragment = try container.decodeIfPresent(String.self, forKey: "rawFragment")
        rawPath = try container.decodeIfPresent(String.self, forKey: "rawPath")
        rawQuery = try container.decodeIfPresent(String.self, forKey: "rawQuery")
        rawSchemeSpecificPart = try container.decodeIfPresent(String.self, forKey: "rawSchemeSpecificPart")
        rawUserInfo = try container.decodeIfPresent(String.self, forKey: "rawUserInfo")
        scheme = try container.decodeIfPresent(String.self, forKey: "scheme")
        schemeSpecificPart = try container.decodeIfPresent(String.self, forKey: "schemeSpecificPart")
        userInfo = try container.decodeIfPresent(String.self, forKey: "userInfo")
    }
}

