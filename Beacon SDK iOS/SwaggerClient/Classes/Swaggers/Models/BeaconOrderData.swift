// SPDX-FileCopyrightText: NOI Techpark <digital@noi.bz.it>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

//
// BeaconOrderData.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class BeaconOrderData: Codable {

    public var beaconId: String?
    public var instanceId: String?
    public var major: Int?
    public var minor: Int?
    public var namespace: String?
    public var uuid: UUID?
    public var zoneCode: String?
    public var zoneId: Int?


    
    public init(beaconId: String?, instanceId: String?, major: Int?, minor: Int?, namespace: String?, uuid: UUID?, zoneCode: String?, zoneId: Int?) {
        self.beaconId = beaconId
        self.instanceId = instanceId
        self.major = major
        self.minor = minor
        self.namespace = namespace
        self.uuid = uuid
        self.zoneCode = zoneCode
        self.zoneId = zoneId
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(beaconId, forKey: "beaconId")
        try container.encodeIfPresent(instanceId, forKey: "instanceId")
        try container.encodeIfPresent(major, forKey: "major")
        try container.encodeIfPresent(minor, forKey: "minor")
        try container.encodeIfPresent(namespace, forKey: "namespace")
        try container.encodeIfPresent(uuid, forKey: "uuid")
        try container.encodeIfPresent(zoneCode, forKey: "zoneCode")
        try container.encodeIfPresent(zoneId, forKey: "zoneId")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        beaconId = try container.decodeIfPresent(String.self, forKey: "beaconId")
        instanceId = try container.decodeIfPresent(String.self, forKey: "instanceId")
        major = try container.decodeIfPresent(Int.self, forKey: "major")
        minor = try container.decodeIfPresent(Int.self, forKey: "minor")
        namespace = try container.decodeIfPresent(String.self, forKey: "namespace")
        uuid = try container.decodeIfPresent(UUID.self, forKey: "uuid")
        zoneCode = try container.decodeIfPresent(String.self, forKey: "zoneCode")
        zoneId = try container.decodeIfPresent(Int.self, forKey: "zoneId")
    }
}

