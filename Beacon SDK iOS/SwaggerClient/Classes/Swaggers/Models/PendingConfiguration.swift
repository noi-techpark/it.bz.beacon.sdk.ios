// SPDX-FileCopyrightText: NOI Techpark <digital@noi.bz.it>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

//
// PendingConfiguration.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class PendingConfiguration: Codable {

    public var eddystoneEid: Bool?
    public var eddystoneEtlm: Bool?
    public var eddystoneTlm: Bool?
    public var eddystoneUid: Bool?
    public var eddystoneUrl: Bool?
    public var iBeacon: Bool?
    public var instanceId: String?
    public var interval: Int?
    public var major: Int?
    public var minor: Int?
    public var namespace: String?
    public var telemetry: Bool?
    public var txPower: Int?
    public var url: String?
    public var uuid: UUID?


    
    public init(eddystoneEid: Bool?, eddystoneEtlm: Bool?, eddystoneTlm: Bool?, eddystoneUid: Bool?, eddystoneUrl: Bool?, iBeacon: Bool?, instanceId: String?, interval: Int?, major: Int?, minor: Int?, namespace: String?, telemetry: Bool?, txPower: Int?, url: String?, uuid: UUID?) {
        self.eddystoneEid = eddystoneEid
        self.eddystoneEtlm = eddystoneEtlm
        self.eddystoneTlm = eddystoneTlm
        self.eddystoneUid = eddystoneUid
        self.eddystoneUrl = eddystoneUrl
        self.iBeacon = iBeacon
        self.instanceId = instanceId
        self.interval = interval
        self.major = major
        self.minor = minor
        self.namespace = namespace
        self.telemetry = telemetry
        self.txPower = txPower
        self.url = url
        self.uuid = uuid
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(eddystoneEid, forKey: "eddystoneEid")
        try container.encodeIfPresent(eddystoneEtlm, forKey: "eddystoneEtlm")
        try container.encodeIfPresent(eddystoneTlm, forKey: "eddystoneTlm")
        try container.encodeIfPresent(eddystoneUid, forKey: "eddystoneUid")
        try container.encodeIfPresent(eddystoneUrl, forKey: "eddystoneUrl")
        try container.encodeIfPresent(iBeacon, forKey: "iBeacon")
        try container.encodeIfPresent(instanceId, forKey: "instanceId")
        try container.encodeIfPresent(interval, forKey: "interval")
        try container.encodeIfPresent(major, forKey: "major")
        try container.encodeIfPresent(minor, forKey: "minor")
        try container.encodeIfPresent(namespace, forKey: "namespace")
        try container.encodeIfPresent(telemetry, forKey: "telemetry")
        try container.encodeIfPresent(txPower, forKey: "txPower")
        try container.encodeIfPresent(url, forKey: "url")
        try container.encodeIfPresent(uuid, forKey: "uuid")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        eddystoneEid = try container.decodeIfPresent(Bool.self, forKey: "eddystoneEid")
        eddystoneEtlm = try container.decodeIfPresent(Bool.self, forKey: "eddystoneEtlm")
        eddystoneTlm = try container.decodeIfPresent(Bool.self, forKey: "eddystoneTlm")
        eddystoneUid = try container.decodeIfPresent(Bool.self, forKey: "eddystoneUid")
        eddystoneUrl = try container.decodeIfPresent(Bool.self, forKey: "eddystoneUrl")
        iBeacon = try container.decodeIfPresent(Bool.self, forKey: "iBeacon")
        instanceId = try container.decodeIfPresent(String.self, forKey: "instanceId")
        interval = try container.decodeIfPresent(Int.self, forKey: "interval")
        major = try container.decodeIfPresent(Int.self, forKey: "major")
        minor = try container.decodeIfPresent(Int.self, forKey: "minor")
        namespace = try container.decodeIfPresent(String.self, forKey: "namespace")
        telemetry = try container.decodeIfPresent(Bool.self, forKey: "telemetry")
        txPower = try container.decodeIfPresent(Int.self, forKey: "txPower")
        url = try container.decodeIfPresent(String.self, forKey: "url")
        uuid = try container.decodeIfPresent(UUID.self, forKey: "uuid")
    }
}

