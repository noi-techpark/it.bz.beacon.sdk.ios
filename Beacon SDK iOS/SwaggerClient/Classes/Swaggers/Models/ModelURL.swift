// SPDX-FileCopyrightText: NOI Techpark <digital@noi.bz.it>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

//
// ModelURL.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ModelURL: Codable {

    public var authority: String?
    public var content: Any?
    public var defaultPort: Int?
    public var file: String?
    public var host: String?
    public var path: String?
    public var port: Int?
    public var _protocol: String?
    public var query: String?
    public var ref: String?
    public var userInfo: String?


    
    public init(authority: String?, content: Any?, defaultPort: Int?, file: String?, host: String?, path: String?, port: Int?, _protocol: String?, query: String?, ref: String?, userInfo: String?) {
        self.authority = authority
        self.content = content
        self.defaultPort = defaultPort
        self.file = file
        self.host = host
        self.path = path
        self.port = port
        self._protocol = _protocol
        self.query = query
        self.ref = ref
        self.userInfo = userInfo
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(authority, forKey: "authority")
//        try container.encodeIfPresent(content, forKey: "content")
        try container.encodeIfPresent(defaultPort, forKey: "defaultPort")
        try container.encodeIfPresent(file, forKey: "file")
        try container.encodeIfPresent(host, forKey: "host")
        try container.encodeIfPresent(path, forKey: "path")
        try container.encodeIfPresent(port, forKey: "port")
        try container.encodeIfPresent(_protocol, forKey: "protocol")
        try container.encodeIfPresent(query, forKey: "query")
        try container.encodeIfPresent(ref, forKey: "ref")
        try container.encodeIfPresent(userInfo, forKey: "userInfo")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        authority = try container.decodeIfPresent(String.self, forKey: "authority")
//        content = try container.decodeIfPresent(Any.self, forKey: "content")
        defaultPort = try container.decodeIfPresent(Int.self, forKey: "defaultPort")
        file = try container.decodeIfPresent(String.self, forKey: "file")
        host = try container.decodeIfPresent(String.self, forKey: "host")
        path = try container.decodeIfPresent(String.self, forKey: "path")
        port = try container.decodeIfPresent(Int.self, forKey: "port")
        _protocol = try container.decodeIfPresent(String.self, forKey: "protocol")
        query = try container.decodeIfPresent(String.self, forKey: "query")
        ref = try container.decodeIfPresent(String.self, forKey: "ref")
        userInfo = try container.decodeIfPresent(String.self, forKey: "userInfo")
    }
}

