// SPDX-FileCopyrightText: NOI Techpark <digital@noi.bz.it>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

//
// UserControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class UserControllerAPI {
    /**
     Update a user
     
     - parameter id: (path) id 
     - parameter passwordChange: (body) passwordChange 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func changePasswordUsingPATCH(id: Int64, passwordChange: PasswordChange, completion: @escaping ((_ data: BaseMessage?,_ error: Error?) -> Void)) {
        changePasswordUsingPATCHWithRequestBuilder(id: id, passwordChange: passwordChange).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Update a user
     - PATCH /v1/admin/users/{id}/change-password
     - API Key:
       - type: apiKey Authorization 
       - name: JWT
     - examples: [{contentType=application/json, example={
  "message" : "message"
}}]
     
     - parameter id: (path) id 
     - parameter passwordChange: (body) passwordChange 

     - returns: RequestBuilder<BaseMessage> 
     */
    open class func changePasswordUsingPATCHWithRequestBuilder(id: Int64, passwordChange: PasswordChange) -> RequestBuilder<BaseMessage> {
        var path = "/v1/admin/users/{id}/change-password"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: passwordChange)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BaseMessage>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a user
     
     - parameter userCreation: (body) userCreation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createUsingPOST4(userCreation: UserCreation, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        createUsingPOST4WithRequestBuilder(userCreation: userCreation).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create a user
     - POST /v1/admin/users
     - API Key:
       - type: apiKey Authorization 
       - name: JWT
     - examples: [{contentType=application/json, example={
  "surname" : "surname",
  "name" : "name",
  "admin" : true,
  "id" : 0,
  "email" : "email",
  "username" : "username"
}}]
     
     - parameter userCreation: (body) userCreation 

     - returns: RequestBuilder<User> 
     */
    open class func createUsingPOST4WithRequestBuilder(userCreation: UserCreation) -> RequestBuilder<User> {
        let path = "/v1/admin/users"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userCreation)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a user
     
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUsingDELETE1(id: Int64, completion: @escaping ((_ data: BaseMessage?,_ error: Error?) -> Void)) {
        deleteUsingDELETE1WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Delete a user
     - DELETE /v1/admin/users/{id}
     - API Key:
       - type: apiKey Authorization 
       - name: JWT
     - examples: [{contentType=application/json, example={
  "message" : "message"
}}]
     
     - parameter id: (path) id 

     - returns: RequestBuilder<BaseMessage> 
     */
    open class func deleteUsingDELETE1WithRequestBuilder(id: Int64) -> RequestBuilder<BaseMessage> {
        var path = "/v1/admin/users/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BaseMessage>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     View a list of available users
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getListUsingGET6(completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        getListUsingGET6WithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     View a list of available users
     - GET /v1/admin/users
     - API Key:
       - type: apiKey Authorization 
       - name: JWT
     - examples: [{contentType=application/json, example=[ {
  "surname" : "surname",
  "name" : "name",
  "admin" : true,
  "id" : 0,
  "email" : "email",
  "username" : "username"
}, {
  "surname" : "surname",
  "name" : "name",
  "admin" : true,
  "id" : 0,
  "email" : "email",
  "username" : "username"
} ]}]

     - returns: RequestBuilder<[User]> 
     */
    open class func getListUsingGET6WithRequestBuilder() -> RequestBuilder<[User]> {
        let path = "/v1/admin/users"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[User]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search a user with an ID
     
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsingGET4(id: Int64, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        getUsingGET4WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Search a user with an ID
     - GET /v1/admin/users/{id}
     - API Key:
       - type: apiKey Authorization 
       - name: JWT
     - examples: [{contentType=application/json, example={
  "surname" : "surname",
  "name" : "name",
  "admin" : true,
  "id" : 0,
  "email" : "email",
  "username" : "username"
}}]
     
     - parameter id: (path) id 

     - returns: RequestBuilder<User> 
     */
    open class func getUsingGET4WithRequestBuilder(id: Int64) -> RequestBuilder<User> {
        var path = "/v1/admin/users/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a user
     
     - parameter id: (path) id 
     - parameter passwordReset: (body) passwordReset 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resetPasswordUsingPATCH(id: Int64, passwordReset: PasswordReset, completion: @escaping ((_ data: BaseMessage?,_ error: Error?) -> Void)) {
        resetPasswordUsingPATCHWithRequestBuilder(id: id, passwordReset: passwordReset).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Update a user
     - PATCH /v1/admin/users/{id}/reset-password
     - API Key:
       - type: apiKey Authorization 
       - name: JWT
     - examples: [{contentType=application/json, example={
  "message" : "message"
}}]
     
     - parameter id: (path) id 
     - parameter passwordReset: (body) passwordReset 

     - returns: RequestBuilder<BaseMessage> 
     */
    open class func resetPasswordUsingPATCHWithRequestBuilder(id: Int64, passwordReset: PasswordReset) -> RequestBuilder<BaseMessage> {
        var path = "/v1/admin/users/{id}/reset-password"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: passwordReset)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BaseMessage>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a user
     
     - parameter id: (path) id 
     - parameter userUpdate: (body) userUpdate 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUsingPATCH2(id: Int64, userUpdate: UserUpdate, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        updateUsingPATCH2WithRequestBuilder(id: id, userUpdate: userUpdate).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Update a user
     - PATCH /v1/admin/users/{id}
     - API Key:
       - type: apiKey Authorization 
       - name: JWT
     - examples: [{contentType=application/json, example={
  "surname" : "surname",
  "name" : "name",
  "admin" : true,
  "id" : 0,
  "email" : "email",
  "username" : "username"
}}]
     
     - parameter id: (path) id 
     - parameter userUpdate: (body) userUpdate 

     - returns: RequestBuilder<User> 
     */
    open class func updateUsingPATCH2WithRequestBuilder(id: Int64, userUpdate: UserUpdate) -> RequestBuilder<User> {
        var path = "/v1/admin/users/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userUpdate)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
